{"version":3,"sources":["sortingAlgorithms.js","components/Header.js","components/Button.js","App.js","index.js"],"names":["mergeSortHelper","mainArray","startIdx","endIdx","auxiliaryArray","animations","middleIdx","Math","floor","k","i","j","push","doMerge","heapify","arr","n","highest","left","right","i2","tmp","swap","console","log","getBubbleSortAnimations","array","len","length","val1","val2","getMergeSortAnimations","slice","getHeapSortAnimations","Header","className","href","target","rel","defaultProps","user","Button","primary","backgroundColor","size","label","disabled","props","mode","type","join","style","onClick","undefined","PRIMARY_COLOR","SECONDARY_COLOR","MAX_VALUE","myValues","initArray","min","max","ceil","random","App","useState","values","setValues","isProcessing","setProcessingState","sortingAlgorithms","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","setTimeout","newHeight","height","cnt","map","value","idx","width","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.14d739a8.chunk.js","sourcesContent":["// HELPER FUNCTIONS\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations,) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // Values that are being compared; Add to animations to change their color.\r\n        animations.push([i, j]);\r\n        // Values that are being compared; Add to animations to revert their color.\r\n        animations.push([i, j]);\r\n\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // Overwrite value at index k in the original array with the value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // Overwrite the value at index k in the original array with the value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // Values that are being compared; Add to animations to change their color.\r\n        animations.push([i, i]);\r\n        // Values that are being compared; Add to animations to revert their color.\r\n        animations.push([i, i]);\r\n        // Overwrite the value at index k in the original array with the value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        // Values that are being compared; Add to animations to change their color.\r\n        animations.push([j, j]);\r\n        // Values that are being compared; Add to animations to revert their color.\r\n        animations.push([j, j]);\r\n        // Overwrite the value at index k in the original array with the value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}\r\n\r\nfunction heapify(arr, n, i, animations) {\r\n    // Find highest value between root, left, and right in tree\r\n    let highest = i;            //index\r\n    const left = 2 * i + 1;     //index\r\n    const right = 2 * i + 2;    //index\r\n\r\n    animations.push([i, left]);\r\n    if (left < n && arr[left] > arr[highest]){\r\n        highest = left;\r\n    }\r\n    animations.push([i, left]);\r\n\r\n    animations.push([i, right]);\r\n    if (right < n && arr[right] > arr[highest]){\r\n        highest = right;\r\n    }\r\n    animations.push([i, right]);\r\n\r\n    if (highest !== i){\r\n        arr = swap(arr, arr[i], arr[highest], animations);\r\n        heapify(arr, n, highest, animations);\r\n    }\r\n\r\n    console.log(arr);\r\n}\r\n\r\n// EXPORTED FUNCTIONS\r\nfunction getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    let len = array.length;\r\n\r\n    if (len <= 1) return array;\r\n\r\n    for (let i = 0; i < len - 1; i++) {\r\n        for (let j = 0; j < len - 1; j++) {\r\n            animations.push([j, j + 1]);\r\n            animations.push([j, j + 1]);\r\n\r\n            if (array[j] > array[j + 1]) {\r\n                let val1 = array[j];\r\n                let val2 = array[j + 1];\r\n\r\n                animations.push([j, val2]);\r\n                animations.push([j + 1, val1]);\r\n\r\n                let tmp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = tmp;\r\n            }\r\n            else {\r\n                animations.push([j, array[j]]);\r\n                animations.push([j + 1, array[j + 1]]);\r\n            }\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\nfunction getHeapSortAnimations(arr) {\r\n    let animations = [];\r\n\r\n    // arr.length / 2 - 1 is the last index that will be the parent of a tree\r\n    for(let i = arr.length / 2 - 1; i >= 0; i--){\r\n        heapify(arr, arr.length, i, animations);\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\nfunction swap(arr, i, i2, animations){\r\n    let tmp = arr[i]\r\n    arr[i] = arr[i2];\r\n    arr[i2] = tmp;\r\n\r\n    return arr;\r\n}\r\n\r\nexport default { getBubbleSortAnimations, getMergeSortAnimations, getHeapSortAnimations }\r\n\r\n// let bubbleSort = (inputArr) => {\r\n//     let len = inputArr.length;\r\n//     for (let i = 0; i < len; i++) {\r\n//         for (let j = 0; j < len; j++) {\r\n//             if (inputArr[j] > inputArr[j + 1]) {\r\n//                 let tmp = inputArr[j];\r\n//                 inputArr[j] = inputArr[j + 1];\r\n//                 inputArr[j + 1] = tmp;\r\n//             }\r\n//         }\r\n//     }\r\n//     return inputArr;\r\n// };","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../styles/css/header.css';\n\nexport const Header = ({ }) => (\n  <header className='App-header'>\n    <h1>\n      Sorting Algorithms Visualiser\n    </h1>\n\n    <h3>\n      Using <a href='https://reactjs.org/' target='_blank' rel='noreferrer'>React</a>\n    </h3>\n  </header>\n  // <header>\n  //   <div className=\"wrapper\">\n  //     <div>\n  //       <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n  //         <g fill=\"none\" fillRule=\"evenodd\">\n  //           <path\n  //             d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n  //             fill=\"#FFF\"\n  //           />\n  //           <path\n  //             d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n  //             fill=\"#555AB9\"\n  //           />\n  //           <path\n  //             d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n  //             fill=\"#91BAF8\"\n  //           />\n  //         </g>\n  //       </svg>\n  //       <h1>Acme</h1>\n  //     </div>\n  //     <div>\n  //       {user ? (\n  //         <Button size=\"small\" onClick={onLogout} label=\"Log out\" />\n  //       ) : (\n  //         <>\n  //           <Button size=\"small\" onClick={onLogin} label=\"Log in\" />\n  //           <Button primary size=\"small\" onClick={onCreateAccount} label=\"Sign up\" />\n  //         </>\n  //       )}\n  //     </div>\n  //   </div>\n  // </header>\n);\n\nHeader.propTypes = {\n  user: PropTypes.shape({}),\n};\n\nHeader.defaultProps = {\n  user: null,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/css/button.css';\n\n/**\n * Primary UI component for user interaction\n */\nexport const Button = ({ primary, backgroundColor, size, label, disabled, ...props }) => {\n  const mode = primary ? 'button--primary' : 'button--secondary';\n  return (\n    <button\n      type=\"button\"\n      className={['button', `button--${size}`, mode].join(' ')}\n      style={backgroundColor && { backgroundColor }}\n      disabled={disabled}\n      {...props}\n    >\n      {label}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  primary: PropTypes.bool,\n  /**\n   * What background color to use\n   */\n  backgroundColor: PropTypes.string,\n  /**\n   * How large should the button be?\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * Button contents\n   */\n  label: PropTypes.string.isRequired,\n  /**\n   * Optional click handler\n   */\n  onClick: PropTypes.func,\n  /**\n   * Optional click handler\n   */\n  disabled: PropTypes.bool,\n};\n\nButton.defaultProps = {\n  backgroundColor: null,\n  primary: false,\n  size: 'medium',\n  onClick: undefined,\n  disabled: false,\n};\n","import { useState } from 'react';\r\nimport React from 'react';\r\nimport './styles/css/App.css';\r\nimport sortingAlgorithms from './sortingAlgorithms.js';\r\nimport { Header } from './components/Header';\r\nimport { Button } from './components/Button';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 5;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 100;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\n// This is the lowest value that should be in the array.\r\nconst MIN_VALUE = 1;\r\n\r\n// This is the highest value that should be in the array. Dictates the height of the different bars.\r\nconst MAX_VALUE = 1000;\r\n\r\n// Initial array of values to eventually be sorted\r\nlet myValues = initArray;\r\n\r\nfunction getRandomInt(min, max) { // Get a random number between specified values\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction initArray() {\r\n  let arr = [];\r\n\r\n  for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n    arr.push(getRandomInt(MIN_VALUE, MAX_VALUE));\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nfunction App() {\r\n  let [values, setValues] = useState(myValues);\r\n  let [isProcessing, setProcessingState] = useState(false);\r\n\r\n  function handleNewArray() {\r\n    setValues(initArray);\r\n  }\r\n\r\n  function handleMergeSort() {\r\n    setProcessingState(true);\r\n    const animations = sortingAlgorithms.getMergeSortAnimations(values);\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n\r\n          if (i === animations.length - 1) {\r\n            setProcessingState(false);\r\n          }\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = (100 / MAX_VALUE) * newHeight + '%';\r\n\r\n          if (i === animations.length - 1) {\r\n            setProcessingState(false);\r\n          }\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleBubbleSort() {\r\n    setProcessingState(true);\r\n    const animations = sortingAlgorithms.getBubbleSortAnimations(values);\r\n    let cnt = 1;\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const [barOneIdx, barTwoIdx] = animations[i];\r\n\r\n      let color = i % 2 !== 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n      let isNotColorChange = ((cnt) % 3 === 0 && ((cnt)) % 4 !== 2) || (cnt) % 4 === 0;\r\n      let isColorChange = !isNotColorChange;\r\n\r\n      if (isColorChange) {\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n        if (cnt % 2 === 0) {\r\n          color = PRIMARY_COLOR\r\n        } else {\r\n          color = SECONDARY_COLOR\r\n        }\r\n\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n\r\n          if (i === animations.length - 1) {\r\n            setProcessingState(false);\r\n          }\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = (100 / MAX_VALUE) * newHeight + '%';\r\n\r\n          if (i === animations.length - 1) {\r\n            setProcessingState(false);\r\n          }\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n\r\n      if (cnt < 4) {\r\n        cnt++;\r\n      } else {\r\n        cnt = 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleHeapSort() {\r\n    const arrayBars = document.getElementsByClassName('array-bar');\r\n    const animations = sortingAlgorithms.getHeapSortAnimations(values);\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      <Header />\r\n\r\n      <section className='inputs'>\r\n        <Button onClick={handleNewArray} label='New Array' primary={true} disabled={isProcessing} />\r\n        <Button onClick={handleMergeSort} label='Merge Sort' primary={true} disabled={isProcessing} />\r\n        <Button onClick={handleBubbleSort} label='Bubble Sort' primary={true} disabled={isProcessing} />\r\n        <Button onClick={handleHeapSort} label='Heap Sort' primary={true} disabled={isProcessing} />\r\n      </section>\r\n\r\n      <section className='bars'>\r\n        <div className='bar-wrapper'>\r\n          {values.map((value, idx) => (\r\n            <div\r\n              className='array-bar'\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: (100 / MAX_VALUE) * value + '%',\r\n                width: 100 / values.length + '%'\r\n              }}></div>\r\n          ))}\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals(console.log);"],"sourceRoot":""}